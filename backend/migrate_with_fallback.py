import psycopg2import sqlite3

import osimport psycopg2

import bcryptimport os

from dotenv import load_dotenvfrom dotenv import load_dotenv



load_dotenv()load_dotenv()



def migrate_with_data():def check_supabase_connectivity():

    print("üîÑ Iniciando migra√ß√£o completa...")    """Verifica se conseguimos conectar ao Supabase"""

        print("üîç Verificando conectividade com Supabase...")

    try:    

        # Conectar ao PostgreSQL (Supabase)    try:

        print("‚òÅÔ∏è Conectando ao Supabase...")        database_url = os.getenv('DATABASE_URL')

        pg_conn = psycopg2.connect(os.getenv('DATABASE_URL'))        print(f"üìã URL: {database_url}")

        pg_cursor = pg_conn.cursor()        

                # Tentar conectar com timeout maior

        # Verificar se usu√°rio admin j√° existe        conn = psycopg2.connect(

        print("üë§ Verificando usu√°rio admin...")            database_url,

        pg_cursor.execute("SELECT COUNT(*) FROM users WHERE username = 'admin'")            connect_timeout=30

        admin_count = pg_cursor.fetchone()[0]        )

                cursor = conn.cursor()

        if admin_count == 0:        cursor.execute("SELECT 1")

            print("üë§ Criando usu√°rio admin...")        conn.close()

            password_hash = bcrypt.hashpw('admin123'.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')        print("‚úÖ Conectividade com Supabase OK!")

            pg_cursor.execute("""        return True

                INSERT INTO users (username, password_hash, role)         

                VALUES (%s, %s, %s)    except Exception as e:

            """, ('admin', password_hash, 'admin'))        print(f"‚ùå Problema de conectividade: {e}")

        else:        return False

            print("‚úÖ Usu√°rio admin j√° existe")

        def migrate_with_fallback():

        # Verificar quantas moedas j√° existem    """Migra dados com fallback para SQLite local se Supabase n√£o estiver dispon√≠vel"""

        pg_cursor.execute("SELECT COUNT(*) FROM coins")    print("üîÑ Iniciando migra√ß√£o com fallback...")

        coin_count = pg_cursor.fetchone()[0]    

            # Verificar conectividade

        if coin_count == 0:    supabase_available = check_supabase_connectivity()

            print("ü™ô Inserindo moedas b√≠blicas...")    

            insert_biblical_coins(pg_cursor)    if not supabase_available:

        else:        print("‚ö†Ô∏è Supabase n√£o dispon√≠vel. Usando SQLite local como alternativa.")

            print(f"‚ÑπÔ∏è J√° existem {coin_count} moedas no banco")        setup_local_database()

            print("ü™ô Adicionando mais moedas b√≠blicas...")        return

            insert_biblical_coins(pg_cursor)    

            # Proceder com migra√ß√£o normal se Supabase estiver dispon√≠vel

        pg_conn.commit()    migrate_to_supabase()

        print("‚úÖ Migra√ß√£o conclu√≠da com sucesso!")

        def setup_local_database():

        # Mostrar estat√≠sticas finais    """Configura banco SQLite local com dados de exemplo"""

        pg_cursor.execute("SELECT COUNT(*) FROM users")    print("üè† Configurando banco de dados local...")

        final_users = pg_cursor.fetchone()[0]    

            try:

        pg_cursor.execute("SELECT COUNT(*) FROM coins")        conn = sqlite3.connect('coins.db')

        final_coins = pg_cursor.fetchone()[0]        cursor = conn.cursor()

                

        print(f"\nüìä ESTAT√çSTICAS FINAIS:")        # Criar tabelas

        print(f"üë• Usu√°rios: {final_users}")        cursor.execute('''

        print(f"ü™ô Moedas: {final_coins}")            CREATE TABLE IF NOT EXISTS users (

                        id INTEGER PRIMARY KEY AUTOINCREMENT,

    except Exception as e:                username TEXT UNIQUE NOT NULL,

        print(f"‚ùå Erro na migra√ß√£o: {e}")                email TEXT UNIQUE NOT NULL,

        import traceback                password_hash TEXT NOT NULL,

        traceback.print_exc()                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP

                    )

    finally:        ''')

        if 'pg_conn' in locals():        

            pg_cursor.close()        cursor.execute('''

            pg_conn.close()            CREATE TABLE IF NOT EXISTS coins (

                id INTEGER PRIMARY KEY AUTOINCREMENT,

def insert_biblical_coins(cursor):                name TEXT NOT NULL,

    """Inserir cole√ß√£o de moedas b√≠blicas"""                period TEXT,

    biblical_coins = [                region TEXT,

        ("Den√°rio de Tib√©rio", "Imp√©rio Romano (14-37 d.C.)", "Palestina", "Prata", "Den√°rio", "14-37 d.C.",                 material TEXT,

         "A famosa moeda do 'Tributo a C√©sar', mencionada diretamente por Jesus Cristo nos Evangelhos.",                 denomination TEXT,

         "O den√°rio era o sal√°rio di√°rio de um trabalhador comum na √©poca de Jesus. Esta moeda tinha a imagem de Tib√©rio C√©sar.",                 year TEXT,

         "Jesus usou-a para ensinar sobre a separa√ß√£o entre os deveres civis e religiosos.",                 description TEXT,

         "Mateus 22:19-21, Marcos 12:15-17",                 historia TEXT,

         "https://images.unsplash.com/photo-1544380904-c686aad2fc40?w=400",                 contexto TEXT,

         "https://images.unsplash.com/photo-1544380904-c686aad2fc40?w=400"),                referencia TEXT,

                        created_by INTEGER,

        ("Shekel da Primeira Revolta", "Revolta Judaica (66-70 d.C.)", "Jerusal√©m", "Prata", "Shekel", "66-70 d.C.",                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

         "Moeda cunhada pelos rebeldes judeus durante a primeira revolta contra Roma.",                FOREIGN KEY (created_by) REFERENCES users (id)

         "Durante a revolta, os judeus estabeleceram sua pr√≥pria casa da moeda em Jerusal√©m como ato de desafio.",            )

         "Simbolizava a esperan√ßa de independ√™ncia nacional e liberdade religiosa.",        ''')

         "Guerras Judaicas de Josefo",        

         "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400",        # Inserir usu√°rio padr√£o

         "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400"),        cursor.execute('''

                    INSERT OR IGNORE INTO users (id, username, email, password_hash)

        ("Lepton da Vi√∫va Pobre", "Per√≠odo do Segundo Templo (40-70 d.C.)", "Jerusal√©m", "Bronze", "Lepton", "40-70 d.C.",            VALUES (1, 'admin', 'admin@coins.com', 'hashed_password')

         "A menor moeda em circula√ß√£o, imortalizada na par√°bola de Jesus sobre a vi√∫va pobre.",        ''')

         "Jesus observou uma vi√∫va pobre oferecendo dois leptons no templo, elogiando sua generosidade.",        

         "Representa o maior ensinamento sobre generosidade e f√© - dar tudo o que se tem.",        # Inserir moedas de exemplo

         "Marcos 12:41-44, Lucas 21:1-4",        sample_coins = [

         "https://images.unsplash.com/photo-1614028674026-a65e31bfd27c?w=400",            ("Den√°rio de Tib√©rio", "Per√≠odo Romano", "Jud√©ia", "Prata", "Den√°rio", "14-37 d.C.", 

         "https://images.unsplash.com/photo-1614028674026-a65e31bfd27c?w=400"),             "Moeda do tempo de Jesus", "Usada durante o minist√©rio de Cristo", 

                     "Mencionada em Mateus 22:19", "Mateus 22:19-21", 1),

        ("Sest√©rcio 'Judaea Capta'", "Imp√©rio Romano (71 d.C.)", "Roma", "Bronze", "Sest√©rcio", "71 d.C.",            ("Shekel do Templo", "Primeiro S√©culo", "Jerusal√©m", "Prata", "Shekel", "66-70 d.C.",

         "Moeda comemorativa da vit√≥ria romana sobre os judeus, com a inscri√ß√£o 'IVDAEA CAPTA'.",             "Moeda da revolta judaica", "Cunhada durante a primeira revolta judaica",

         "Cunhada ap√≥s a destrui√ß√£o de Jerusal√©m para celebrar a vit√≥ria imperial.",             "S√≠mbolo de independ√™ncia", "Hist√≥ria Judaica", 1),

         "Marca o in√≠cio da di√°spora judaica que duraria quase 2.000 anos.",            ("Lepton da Vi√∫va", "Per√≠odo do Templo", "Jerusal√©m", "Bronze", "Lepton", "40-70 d.C.",

         "Guerras Judaicas, Mateus 24:1-2",             "A menor moeda judaica", "Mencionada na par√°bola da vi√∫va pobre",

         "https://images.unsplash.com/photo-1567783243594-4012e67c7b7b?w=400",             "S√≠mbolo de generosidade", "Marcos 12:41-44", 1),

         "https://images.unsplash.com/photo-1567783243594-4012e67c7b7b?w=400"),            ("Sest√©rcio de Vespasiano", "Per√≠odo Romano", "Roma", "Bronze", "Sest√©rcio", "69-79 d.C.",

                     "Moeda comemorativa", "Celebra a conquista da Jud√©ia",

        ("Tetradracma de Tiro", "Cidade-Estado de Tiro (20 a.C. - 70 d.C.)", "Tiro", "Prata", "Tetradracma", "20 a.C. - 70 d.C.",             "Propaganda imperial romana", "Hist√≥ria Romana", 1),

         "√önica moeda aceita no templo de Jerusal√©m, possivelmente as '30 moedas de prata' de Judas.",            ("Dracma de Ant√≠oco IV", "Per√≠odo Sel√™ucida", "S√≠ria", "Prata", "Dracma", "175-164 a.C.",

         "Apesar da imagem pag√£, era aceita no templo devido √† pureza excepcional da prata.",             "Moeda helen√≠stica", "Do tempo dos Macabeus",

         "Ironia: moedas pag√£s usadas no templo sagrado e para trair o Messias.",             "Per√≠odo de persegui√ß√£o religiosa", "1 Macabeus", 1)

         "Mateus 26:15, 27:3-10",        ]

         "https://images.unsplash.com/photo-1598300042247-d088f8ab3a91?w=400",        

         "https://images.unsplash.com/photo-1598300042247-d088f8ab3a91?w=400"),        for coin in sample_coins:

                    cursor.execute('''

        ("Dracma de Ant√≠oco IV", "Imp√©rio Sel√™ucida (175-164 a.C.)", "Antioquia", "Prata", "Dracma", "175-164 a.C.",                INSERT OR IGNORE INTO coins 

         "Moeda do rei que profanou o templo, desencadeando a revolta dos Macabeus.",                (name, period, region, material, denomination, year, description, 

         "Ant√≠oco tentou helenizar os judeus e profanou o templo oferecendo porcos no altar.",                 historia, contexto, referencia, created_by)

         "A purifica√ß√£o posterior √© celebrada na festa de Hanukk√°.",                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

         "1 Macabeus, Daniel 8:9-14",            ''', coin)

         "https://images.unsplash.com/photo-1609081219090-a6d81d3085bf?w=400",        

         "https://images.unsplash.com/photo-1609081219090-a6d81d3085bf?w=400")        conn.commit()

    ]        print("‚úÖ Banco de dados local configurado com sucesso!")

            print(f"üìä {cursor.rowcount} moedas inseridas")

    for coin_data in biblical_coins:        

        cursor.execute("""        # Verificar dados

            INSERT INTO coins (name, period, region, material, denomination, year,         cursor.execute("SELECT COUNT(*) FROM coins")

                             description, historia, contexto, referencia, image_front, image_back, created_by)        count = cursor.fetchone()[0]

            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, 1)        print(f"üìã Total de moedas no banco: {count}")

        """, coin_data)        

            conn.close()

    print(f"‚úÖ {len(biblical_coins)} moedas b√≠blicas inseridas!")        

    except Exception as e:

if __name__ == "__main__":        print(f"‚ùå Erro ao configurar banco local: {e}")

    migrate_with_data()
def migrate_to_supabase():
    """Migra√ß√£o original para Supabase"""
    print("‚òÅÔ∏è Migrando para Supabase...")
    # C√≥digo original da migra√ß√£o aqui...
    # (implementar se necess√°rio)

if __name__ == "__main__":
    migrate_with_fallback()